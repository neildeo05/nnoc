$version Generated by VerilatedVcd $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 2 clk $end
  $var wire 32 6 i_north [31:0] $end
  $var wire 16 5 i_weight [15:0] $end
  $var wire 16 7 i_west [15:0] $end
  $var wire  1 4 load $end
  $var wire 16 8 o_east [15:0] $end
  $var wire 32 9 o_south [31:0] $end
  $var wire  1 3 reset $end
  $scope module PE_bf16 $end
   $var wire  1 2 clk $end
   $var wire 16 - east_ff [15:0] $end
   $var wire 32 # fma_value [31:0] $end
   $var wire 32 6 i_north [31:0] $end
   $var wire 16 5 i_weight [15:0] $end
   $var wire 16 7 i_west [15:0] $end
   $var wire  1 4 load $end
   $var wire 16 8 o_east [15:0] $end
   $var wire 32 9 o_south [31:0] $end
   $var wire  1 3 reset $end
   $var wire 32 . south_ff [31:0] $end
   $var wire 16 , weight [15:0] $end
   $scope module fma_unit $end
    $var wire 16 7 a [15:0] $end
    $var wire  8 : addendExp [7:0] $end
    $var wire 24 % addendMant [23:0] $end
    $var wire 16 , b [15:0] $end
    $var wire  8 ( biggerExp [7:0] $end
    $var wire 32 6 c [31:0] $end
    $var wire 24 ) finalMant [23:0] $end
    $var wire  8 ' mulOutExp [7:0] $end
    $var wire 24 & mulOutMant [23:0] $end
    $var wire 32 $ mul_out [31:0] $end
    $var wire 32 # out [31:0] $end
    $scope module multiplier $end
     $var wire 16 7 a [15:0] $end
     $var wire 16 , b [15:0] $end
     $var wire  8 = exponent_a [7:0] $end
     $var wire  8 0 exponent_b [7:0] $end
     $var wire  8 * exponent_product [7:0] $end
     $var wire  8 > man_a [7:0] $end
     $var wire  8 1 man_b [7:0] $end
     $var wire 16 + man_product [15:0] $end
     $var wire 32 $ mul_out [31:0] $end
     $var wire  1 ; sign_a $end
     $var wire  1 / sign_b $end
     $var wire  1 < sign_product $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b01000000110001011100001010001111 #
b00000000110010000000000000000000 $
b100010111000010100011111 %
b000000000000000000000000 &
b00000001 '
b10000001 (
b100010111000010100011111 )
b00000001 *
b1001000000000000 +
b0000000000000000 ,
b0000000000000000 -
b00000000000000000000000000000000 .
0/
b00000000 0
b10000000 1
02
03
14
b0100000011100110 5
b01000000000010111000010100011111 6
b0100000001001000 7
b0000000000000000 8
b00000000000000000000000000000000 9
b10000000 :
0;
0<
b10000000 =
b11001000 >
#1
b01000001110001010010000010100011 #
b01000001101100111011000000000000 $
b000100010111000010100011 %
b101100111011000000000000 &
b10000011 '
b10000011 (
b100010100100000101000111 )
b10000011 *
b0110011101100000 +
b0100000011100110 ,
b10000001 0
b11100110 1
12
#2
02
04
#3
b0100000001001000 -
b01000001110001010010000010100011 .
12
b0100000001001000 8
b01000001110001010010000010100011 9
#4
02
#5
12
#6
02
#7
12
#8
02
#9
12
#10
02
#11
12
#12
02
#13
12
#14
02
#15
12
#16
02
#17
12
#18
02
#19
12
#20
02
#21
12
#22
02
#23
12
#24
02
