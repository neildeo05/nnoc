$version Generated by VerilatedVcd $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  8 n activation[0] [7:0] $end
  $var wire  8 x activation[10] [7:0] $end
  $var wire  8 y activation[11] [7:0] $end
  $var wire  8 z activation[12] [7:0] $end
  $var wire  8 { activation[13] [7:0] $end
  $var wire  8 | activation[14] [7:0] $end
  $var wire  8 } activation[15] [7:0] $end
  $var wire  8 o activation[1] [7:0] $end
  $var wire  8 p activation[2] [7:0] $end
  $var wire  8 q activation[3] [7:0] $end
  $var wire  8 r activation[4] [7:0] $end
  $var wire  8 s activation[5] [7:0] $end
  $var wire  8 t activation[6] [7:0] $end
  $var wire  8 u activation[7] [7:0] $end
  $var wire  8 v activation[8] [7:0] $end
  $var wire  8 w activation[9] [7:0] $end
  $var wire  1 [ clk $end
  $var wire  1 ] load $end
  $var wire  1 \ reset $end
  $var wire  8 ~ result[0] [7:0] $end
  $var wire  8 *! result[10] [7:0] $end
  $var wire  8 +! result[11] [7:0] $end
  $var wire  8 ,! result[12] [7:0] $end
  $var wire  8 -! result[13] [7:0] $end
  $var wire  8 .! result[14] [7:0] $end
  $var wire  8 /! result[15] [7:0] $end
  $var wire  8 !! result[1] [7:0] $end
  $var wire  8 "! result[2] [7:0] $end
  $var wire  8 #! result[3] [7:0] $end
  $var wire  8 $! result[4] [7:0] $end
  $var wire  8 %! result[5] [7:0] $end
  $var wire  8 &! result[6] [7:0] $end
  $var wire  8 '! result[7] [7:0] $end
  $var wire  8 (! result[8] [7:0] $end
  $var wire  8 )! result[9] [7:0] $end
  $var wire  8 ^ weights[0] [7:0] $end
  $var wire  8 h weights[10] [7:0] $end
  $var wire  8 i weights[11] [7:0] $end
  $var wire  8 j weights[12] [7:0] $end
  $var wire  8 k weights[13] [7:0] $end
  $var wire  8 l weights[14] [7:0] $end
  $var wire  8 m weights[15] [7:0] $end
  $var wire  8 _ weights[1] [7:0] $end
  $var wire  8 ` weights[2] [7:0] $end
  $var wire  8 a weights[3] [7:0] $end
  $var wire  8 b weights[4] [7:0] $end
  $var wire  8 c weights[5] [7:0] $end
  $var wire  8 d weights[6] [7:0] $end
  $var wire  8 e weights[7] [7:0] $end
  $var wire  8 f weights[8] [7:0] $end
  $var wire  8 g weights[9] [7:0] $end
  $scope module Core $end
   $var wire  8 n activation[0] [7:0] $end
   $var wire  8 x activation[10] [7:0] $end
   $var wire  8 y activation[11] [7:0] $end
   $var wire  8 z activation[12] [7:0] $end
   $var wire  8 { activation[13] [7:0] $end
   $var wire  8 | activation[14] [7:0] $end
   $var wire  8 } activation[15] [7:0] $end
   $var wire  8 o activation[1] [7:0] $end
   $var wire  8 p activation[2] [7:0] $end
   $var wire  8 q activation[3] [7:0] $end
   $var wire  8 r activation[4] [7:0] $end
   $var wire  8 s activation[5] [7:0] $end
   $var wire  8 t activation[6] [7:0] $end
   $var wire  8 u activation[7] [7:0] $end
   $var wire  8 v activation[8] [7:0] $end
   $var wire  8 w activation[9] [7:0] $end
   $var wire  1 [ clk $end
   $var wire  1 ] load $end
   $var wire  1 \ reset $end
   $var wire  8 ~ result[0] [7:0] $end
   $var wire  8 *! result[10] [7:0] $end
   $var wire  8 +! result[11] [7:0] $end
   $var wire  8 ,! result[12] [7:0] $end
   $var wire  8 -! result[13] [7:0] $end
   $var wire  8 .! result[14] [7:0] $end
   $var wire  8 /! result[15] [7:0] $end
   $var wire  8 !! result[1] [7:0] $end
   $var wire  8 "! result[2] [7:0] $end
   $var wire  8 #! result[3] [7:0] $end
   $var wire  8 $! result[4] [7:0] $end
   $var wire  8 %! result[5] [7:0] $end
   $var wire  8 &! result[6] [7:0] $end
   $var wire  8 '! result[7] [7:0] $end
   $var wire  8 (! result[8] [7:0] $end
   $var wire  8 )! result[9] [7:0] $end
   $var wire  8 # row1_val [7:0] $end
   $var wire  8 $ row2_val [7:0] $end
   $var wire  8 % row3_val [7:0] $end
   $var wire  8 & row4_val [7:0] $end
   $var wire  8 ^ weights[0] [7:0] $end
   $var wire  8 h weights[10] [7:0] $end
   $var wire  8 i weights[11] [7:0] $end
   $var wire  8 j weights[12] [7:0] $end
   $var wire  8 k weights[13] [7:0] $end
   $var wire  8 l weights[14] [7:0] $end
   $var wire  8 m weights[15] [7:0] $end
   $var wire  8 _ weights[1] [7:0] $end
   $var wire  8 ` weights[2] [7:0] $end
   $var wire  8 a weights[3] [7:0] $end
   $var wire  8 b weights[4] [7:0] $end
   $var wire  8 c weights[5] [7:0] $end
   $var wire  8 d weights[6] [7:0] $end
   $var wire  8 e weights[7] [7:0] $end
   $var wire  8 f weights[8] [7:0] $end
   $var wire  8 g weights[9] [7:0] $end
   $scope module shb $end
    $var wire  8 n activation[0] [7:0] $end
    $var wire  8 x activation[10] [7:0] $end
    $var wire  8 y activation[11] [7:0] $end
    $var wire  8 z activation[12] [7:0] $end
    $var wire  8 { activation[13] [7:0] $end
    $var wire  8 | activation[14] [7:0] $end
    $var wire  8 } activation[15] [7:0] $end
    $var wire  8 o activation[1] [7:0] $end
    $var wire  8 p activation[2] [7:0] $end
    $var wire  8 q activation[3] [7:0] $end
    $var wire  8 r activation[4] [7:0] $end
    $var wire  8 s activation[5] [7:0] $end
    $var wire  8 t activation[6] [7:0] $end
    $var wire  8 u activation[7] [7:0] $end
    $var wire  8 v activation[8] [7:0] $end
    $var wire  8 w activation[9] [7:0] $end
    $var wire  1 [ clk $end
    $var wire  1 ] load $end
    $var wire  1 \ reset $end
    $var wire  8 # row1_val [7:0] $end
    $var wire  8 $ row2_val [7:0] $end
    $var wire  8 % row3_val [7:0] $end
    $var wire  8 & row4_val [7:0] $end
    $var wire  8 ' shift_row_1_wires[0] [7:0] $end
    $var wire  8 ( shift_row_1_wires[1] [7:0] $end
    $var wire  8 ) shift_row_1_wires[2] [7:0] $end
    $var wire  8 * shift_row_1_wires[3] [7:0] $end
    $var wire  8 + shift_row_1_wires[4] [7:0] $end
    $var wire  8 , shift_row_1_wires[5] [7:0] $end
    $var wire  8 - shift_row_1_wires[6] [7:0] $end
    $var wire  8 . shift_row_2_wires[0] [7:0] $end
    $var wire  8 / shift_row_2_wires[1] [7:0] $end
    $var wire  8 0 shift_row_2_wires[2] [7:0] $end
    $var wire  8 1 shift_row_2_wires[3] [7:0] $end
    $var wire  8 2 shift_row_2_wires[4] [7:0] $end
    $var wire  8 3 shift_row_2_wires[5] [7:0] $end
    $var wire  8 4 shift_row_2_wires[6] [7:0] $end
    $var wire  8 5 shift_row_3_wires[0] [7:0] $end
    $var wire  8 6 shift_row_3_wires[1] [7:0] $end
    $var wire  8 7 shift_row_3_wires[2] [7:0] $end
    $var wire  8 8 shift_row_3_wires[3] [7:0] $end
    $var wire  8 9 shift_row_3_wires[4] [7:0] $end
    $var wire  8 : shift_row_3_wires[5] [7:0] $end
    $var wire  8 ; shift_row_3_wires[6] [7:0] $end
    $var wire  8 < shift_row_4_wires[0] [7:0] $end
    $var wire  8 = shift_row_4_wires[1] [7:0] $end
    $var wire  8 > shift_row_4_wires[2] [7:0] $end
    $var wire  8 ? shift_row_4_wires[3] [7:0] $end
    $var wire  8 @ shift_row_4_wires[4] [7:0] $end
    $var wire  8 A shift_row_4_wires[5] [7:0] $end
    $var wire  8 B shift_row_4_wires[6] [7:0] $end
    $scope module first_row_shr $end
     $var wire  1 [ clk $end
     $var wire  8 C curr [7:0] $end
     $var wire  1 ] load $end
     $var wire  8 C out [7:0] $end
     $var wire  8 ?! pload [7:0] $end
     $var wire  1 \ reset $end
     $var wire  8 ?! shin [7:0] $end
    $upscope $end
    $scope module genblk1[1] $end
     $scope module genblk1 $end
      $scope module shr $end
       $var wire  1 [ clk $end
       $var wire  8 D curr [7:0] $end
       $var wire  1 ] load $end
       $var wire  8 D out [7:0] $end
       $var wire  8 ?! pload [7:0] $end
       $var wire  1 \ reset $end
       $var wire  8 C shin [7:0] $end
      $upscope $end
     $upscope $end
    $upscope $end
    $scope module genblk1[2] $end
     $scope module genblk1 $end
      $scope module shr $end
       $var wire  1 [ clk $end
       $var wire  8 E curr [7:0] $end
       $var wire  1 ] load $end
       $var wire  8 E out [7:0] $end
       $var wire  8 ?! pload [7:0] $end
       $var wire  1 \ reset $end
       $var wire  8 D shin [7:0] $end
      $upscope $end
     $upscope $end
    $upscope $end
    $scope module genblk1[3] $end
     $scope module genblk1 $end
      $scope module shr $end
       $var wire  1 [ clk $end
       $var wire  8 F curr [7:0] $end
       $var wire  1 ] load $end
       $var wire  8 F out [7:0] $end
       $var wire  8 0! pload [7:0] $end
       $var wire  1 \ reset $end
       $var wire  8 E shin [7:0] $end
      $upscope $end
     $upscope $end
    $upscope $end
    $scope module genblk1[4] $end
     $scope module genblk1 $end
      $scope module shr $end
       $var wire  1 [ clk $end
       $var wire  8 G curr [7:0] $end
       $var wire  1 ] load $end
       $var wire  8 G out [7:0] $end
       $var wire  8 1! pload [7:0] $end
       $var wire  1 \ reset $end
       $var wire  8 F shin [7:0] $end
      $upscope $end
     $upscope $end
    $upscope $end
    $scope module genblk1[5] $end
     $scope module genblk1 $end
      $scope module shr $end
       $var wire  1 [ clk $end
       $var wire  8 H curr [7:0] $end
       $var wire  1 ] load $end
       $var wire  8 H out [7:0] $end
       $var wire  8 2! pload [7:0] $end
       $var wire  1 \ reset $end
       $var wire  8 G shin [7:0] $end
      $upscope $end
     $upscope $end
    $upscope $end
    $scope module genblk1[6] $end
     $scope module genblk1 $end
      $scope module shr $end
       $var wire  1 [ clk $end
       $var wire  8 # curr [7:0] $end
       $var wire  1 ] load $end
       $var wire  8 # out [7:0] $end
       $var wire  8 3! pload [7:0] $end
       $var wire  1 \ reset $end
       $var wire  8 H shin [7:0] $end
      $upscope $end
     $upscope $end
    $upscope $end
    $scope module genblk2[2] $end
     $scope module genblk1 $end
      $scope module shr $end
       $var wire  1 [ clk $end
       $var wire  8 J curr [7:0] $end
       $var wire  1 ] load $end
       $var wire  8 J out [7:0] $end
       $var wire  8 4! pload [7:0] $end
       $var wire  1 \ reset $end
       $var wire  8 I shin [7:0] $end
      $upscope $end
     $upscope $end
    $upscope $end
    $scope module genblk2[3] $end
     $scope module genblk1 $end
      $scope module shr $end
       $var wire  1 [ clk $end
       $var wire  8 K curr [7:0] $end
       $var wire  1 ] load $end
       $var wire  8 K out [7:0] $end
       $var wire  8 5! pload [7:0] $end
       $var wire  1 \ reset $end
       $var wire  8 J shin [7:0] $end
      $upscope $end
     $upscope $end
    $upscope $end
    $scope module genblk2[4] $end
     $scope module genblk1 $end
      $scope module shr $end
       $var wire  1 [ clk $end
       $var wire  8 L curr [7:0] $end
       $var wire  1 ] load $end
       $var wire  8 L out [7:0] $end
       $var wire  8 6! pload [7:0] $end
       $var wire  1 \ reset $end
       $var wire  8 K shin [7:0] $end
      $upscope $end
     $upscope $end
    $upscope $end
    $scope module genblk2[5] $end
     $scope module genblk1 $end
      $scope module shr $end
       $var wire  1 [ clk $end
       $var wire  8 M curr [7:0] $end
       $var wire  1 ] load $end
       $var wire  8 M out [7:0] $end
       $var wire  8 7! pload [7:0] $end
       $var wire  1 \ reset $end
       $var wire  8 L shin [7:0] $end
      $upscope $end
     $upscope $end
    $upscope $end
    $scope module genblk2[6] $end
     $scope module genblk1 $end
      $scope module shr $end
       $var wire  1 [ clk $end
       $var wire  8 $ curr [7:0] $end
       $var wire  1 ] load $end
       $var wire  8 $ out [7:0] $end
       $var wire  8 ?! pload [7:0] $end
       $var wire  1 \ reset $end
       $var wire  8 M shin [7:0] $end
      $upscope $end
     $upscope $end
    $upscope $end
    $scope module genblk3[1] $end
     $scope module genblk1 $end
      $scope module shr $end
       $var wire  1 [ clk $end
       $var wire  8 O curr [7:0] $end
       $var wire  1 ] load $end
       $var wire  8 O out [7:0] $end
       $var wire  8 7! pload [7:0] $end
       $var wire  1 \ reset $end
       $var wire  8 N shin [7:0] $end
      $upscope $end
     $upscope $end
    $upscope $end
    $scope module genblk3[2] $end
     $scope module genblk1 $end
      $scope module shr $end
       $var wire  1 [ clk $end
       $var wire  8 P curr [7:0] $end
       $var wire  1 ] load $end
       $var wire  8 P out [7:0] $end
       $var wire  8 8! pload [7:0] $end
       $var wire  1 \ reset $end
       $var wire  8 O shin [7:0] $end
      $upscope $end
     $upscope $end
    $upscope $end
    $scope module genblk3[3] $end
     $scope module genblk1 $end
      $scope module shr $end
       $var wire  1 [ clk $end
       $var wire  8 Q curr [7:0] $end
       $var wire  1 ] load $end
       $var wire  8 Q out [7:0] $end
       $var wire  8 9! pload [7:0] $end
       $var wire  1 \ reset $end
       $var wire  8 P shin [7:0] $end
      $upscope $end
     $upscope $end
    $upscope $end
    $scope module genblk3[4] $end
     $scope module genblk1 $end
      $scope module shr $end
       $var wire  1 [ clk $end
       $var wire  8 R curr [7:0] $end
       $var wire  1 ] load $end
       $var wire  8 R out [7:0] $end
       $var wire  8 :! pload [7:0] $end
       $var wire  1 \ reset $end
       $var wire  8 Q shin [7:0] $end
      $upscope $end
     $upscope $end
    $upscope $end
    $scope module genblk3[5] $end
     $scope module genblk1 $end
      $scope module shr $end
       $var wire  1 [ clk $end
       $var wire  8 S curr [7:0] $end
       $var wire  1 ] load $end
       $var wire  8 S out [7:0] $end
       $var wire  8 ?! pload [7:0] $end
       $var wire  1 \ reset $end
       $var wire  8 R shin [7:0] $end
      $upscope $end
     $upscope $end
    $upscope $end
    $scope module genblk3[6] $end
     $scope module genblk1 $end
      $scope module shr $end
       $var wire  1 [ clk $end
       $var wire  8 % curr [7:0] $end
       $var wire  1 ] load $end
       $var wire  8 % out [7:0] $end
       $var wire  8 ?! pload [7:0] $end
       $var wire  1 \ reset $end
       $var wire  8 S shin [7:0] $end
      $upscope $end
     $upscope $end
    $upscope $end
    $scope module genblk4[0] $end
     $scope module genblk1 $end
      $scope module shr $end
       $var wire  1 [ clk $end
       $var wire  8 T curr [7:0] $end
       $var wire  1 ] load $end
       $var wire  8 T out [7:0] $end
       $var wire  8 ;! pload [7:0] $end
       $var wire  1 \ reset $end
       $var wire  8 ?! shin [7:0] $end
      $upscope $end
     $upscope $end
    $upscope $end
    $scope module genblk4[1] $end
     $scope module genblk1 $end
      $scope module shr $end
       $var wire  1 [ clk $end
       $var wire  8 U curr [7:0] $end
       $var wire  1 ] load $end
       $var wire  8 U out [7:0] $end
       $var wire  8 <! pload [7:0] $end
       $var wire  1 \ reset $end
       $var wire  8 T shin [7:0] $end
      $upscope $end
     $upscope $end
    $upscope $end
    $scope module genblk4[2] $end
     $scope module genblk1 $end
      $scope module shr $end
       $var wire  1 [ clk $end
       $var wire  8 V curr [7:0] $end
       $var wire  1 ] load $end
       $var wire  8 V out [7:0] $end
       $var wire  8 =! pload [7:0] $end
       $var wire  1 \ reset $end
       $var wire  8 U shin [7:0] $end
      $upscope $end
     $upscope $end
    $upscope $end
    $scope module genblk4[3] $end
     $scope module genblk1 $end
      $scope module shr $end
       $var wire  1 [ clk $end
       $var wire  8 W curr [7:0] $end
       $var wire  1 ] load $end
       $var wire  8 W out [7:0] $end
       $var wire  8 >! pload [7:0] $end
       $var wire  1 \ reset $end
       $var wire  8 V shin [7:0] $end
      $upscope $end
     $upscope $end
    $upscope $end
    $scope module genblk4[4] $end
     $scope module genblk1 $end
      $scope module shr $end
       $var wire  1 [ clk $end
       $var wire  8 X curr [7:0] $end
       $var wire  1 ] load $end
       $var wire  8 X out [7:0] $end
       $var wire  8 ?! pload [7:0] $end
       $var wire  1 \ reset $end
       $var wire  8 W shin [7:0] $end
      $upscope $end
     $upscope $end
    $upscope $end
    $scope module genblk4[5] $end
     $scope module genblk1 $end
      $scope module shr $end
       $var wire  1 [ clk $end
       $var wire  8 Y curr [7:0] $end
       $var wire  1 ] load $end
       $var wire  8 Y out [7:0] $end
       $var wire  8 ?! pload [7:0] $end
       $var wire  1 \ reset $end
       $var wire  8 X shin [7:0] $end
      $upscope $end
     $upscope $end
    $upscope $end
    $scope module genblk4[6] $end
     $scope module genblk1 $end
      $scope module shr $end
       $var wire  1 [ clk $end
       $var wire  8 & curr [7:0] $end
       $var wire  1 ] load $end
       $var wire  8 & out [7:0] $end
       $var wire  8 ?! pload [7:0] $end
       $var wire  1 \ reset $end
       $var wire  8 Y shin [7:0] $end
      $upscope $end
     $upscope $end
    $upscope $end
    $scope module second_row_shr1 $end
     $var wire  1 [ clk $end
     $var wire  8 Z curr [7:0] $end
     $var wire  1 ] load $end
     $var wire  8 Z out [7:0] $end
     $var wire  8 ?! pload [7:0] $end
     $var wire  1 \ reset $end
     $var wire  8 ?! shin [7:0] $end
    $upscope $end
    $scope module second_row_shr2 $end
     $var wire  1 [ clk $end
     $var wire  8 I curr [7:0] $end
     $var wire  1 ] load $end
     $var wire  8 I out [7:0] $end
     $var wire  8 ?! pload [7:0] $end
     $var wire  1 \ reset $end
     $var wire  8 ?! shin [7:0] $end
    $upscope $end
    $scope module third_row_shr1 $end
     $var wire  1 [ clk $end
     $var wire  8 N curr [7:0] $end
     $var wire  1 ] load $end
     $var wire  8 N out [7:0] $end
     $var wire  8 ?! pload [7:0] $end
     $var wire  1 \ reset $end
     $var wire  8 ?! shin [7:0] $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000 #
b00000000 $
b00000000 %
b00000000 &
b00000000 '
b00000000 (
b00000000 )
b00000000 *
b00000000 +
b00000000 ,
b00000000 -
b00000000 .
b00000000 /
b00000000 0
b00000000 1
b00000000 2
b00000000 3
b00000000 4
b00000000 5
b00000000 6
b00000000 7
b00000000 8
b00000000 9
b00000000 :
b00000000 ;
b00000000 <
b00000000 =
b00000000 >
b00000000 ?
b00000000 @
b00000000 A
b00000000 B
b00000000 C
b00000000 D
b00000000 E
b00000000 F
b00000000 G
b00000000 H
b00000000 I
b00000000 J
b00000000 K
b00000000 L
b00000000 M
b00000000 N
b00000000 O
b00000000 P
b00000000 Q
b00000000 R
b00000000 S
b00000000 T
b00000000 U
b00000000 V
b00000000 W
b00000000 X
b00000000 Y
b00000000 Z
0[
0\
1]
b00000000 ^
b00000000 _
b00000000 `
b00000000 a
b00000000 b
b00000000 c
b00000000 d
b00000000 e
b00000000 f
b00000000 g
b00000000 h
b00000000 i
b00000000 j
b00000000 k
b00000000 l
b00000000 m
b00000001 n
b00000010 o
b00000011 p
b00000100 q
b00000101 r
b00000110 s
b00000111 t
b00001000 u
b00001001 v
b00001010 w
b00001011 x
b00001100 y
b00001101 z
b00001110 {
b00001111 |
b00010000 }
b00000000 ~
b00000000 !!
b00000000 "!
b00000000 #!
b00000000 $!
b00000000 %!
b00000000 &!
b00000000 '!
b00000000 (!
b00000000 )!
b00000000 *!
b00000000 +!
b00000000 ,!
b00000000 -!
b00000000 .!
b00000000 /!
b00000001 0!
b00000010 1!
b00000011 2!
b00000100 3!
b00000101 4!
b00000110 5!
b00000111 6!
b00001000 7!
b00001001 8!
b00001010 9!
b00001011 :!
b00001100 ;!
b00001101 <!
b00001110 =!
b00001111 >!
b00000000 ?!
#1
b00000100 #
b00000001 *
b00000010 +
b00000011 ,
b00000100 -
b00000101 0
b00000110 1
b00000111 2
b00001000 3
b00001000 6
b00001001 7
b00001010 8
b00001011 9
b00001100 <
b00001101 =
b00001110 >
b00001111 ?
b00000001 F
b00000010 G
b00000011 H
b00000101 J
b00000110 K
b00000111 L
b00001000 M
b00001000 O
b00001001 P
b00001010 Q
b00001011 R
b00001100 T
b00001101 U
b00001110 V
b00001111 W
1[
#2
0[
0]
#3
b00000011 #
b00001000 $
b00000000 *
b00000001 +
b00000010 ,
b00000011 -
b00000000 0
b00000101 1
b00000110 2
b00000111 3
b00001000 4
b00000000 6
b00001000 7
b00001001 8
b00001010 9
b00001011 :
b00000000 <
b00001100 =
b00001101 >
b00001110 ?
b00001111 @
b00000000 F
b00000001 G
b00000010 H
b00000000 J
b00000101 K
b00000110 L
b00000111 M
b00000000 O
b00001000 P
b00001001 Q
b00001010 R
b00001011 S
b00000000 T
b00001100 U
b00001101 V
b00001110 W
b00001111 X
1[
#4
0[
#5
b00000010 #
b00000111 $
b00001011 %
b00000000 +
b00000001 ,
b00000010 -
b00000000 1
b00000101 2
b00000110 3
b00000111 4
b00000000 7
b00001000 8
b00001001 9
b00001010 :
b00001011 ;
b00000000 =
b00001100 >
b00001101 ?
b00001110 @
b00001111 A
b00000000 G
b00000001 H
b00000000 K
b00000101 L
b00000110 M
b00000000 P
b00001000 Q
b00001001 R
b00001010 S
b00000000 U
b00001100 V
b00001101 W
b00001110 X
b00001111 Y
1[
#6
0[
#7
b00000001 #
b00000110 $
b00001010 %
b00001111 &
b00000000 ,
b00000001 -
b00000000 2
b00000101 3
b00000110 4
b00000000 8
b00001000 9
b00001001 :
b00001010 ;
b00000000 >
b00001100 ?
b00001101 @
b00001110 A
b00001111 B
b00000000 H
b00000000 L
b00000101 M
b00000000 Q
b00001000 R
b00001001 S
b00000000 V
b00001100 W
b00001101 X
b00001110 Y
1[
#8
0[
#9
b00000000 #
b00000101 $
b00001001 %
b00001110 &
b00000000 -
b00000000 3
b00000101 4
b00000000 9
b00001000 :
b00001001 ;
b00000000 ?
b00001100 @
b00001101 A
b00001110 B
b00000000 M
b00000000 R
b00001000 S
b00000000 W
b00001100 X
b00001101 Y
1[
#10
0[
#11
b00000000 $
b00001000 %
b00001101 &
b00000000 4
b00000000 :
b00001000 ;
b00000000 @
b00001100 A
b00001101 B
b00000000 S
b00000000 X
b00001100 Y
1[
#12
0[
#13
b00000000 %
b00001100 &
b00000000 ;
b00000000 A
b00001100 B
b00000000 Y
1[
#14
0[
#15
b00000000 &
b00000000 B
1[
#16
0[
#17
1[
#18
0[
1]
#19
b00000100 #
b00000001 *
b00000010 +
b00000011 ,
b00000100 -
b00000101 0
b00000110 1
b00000111 2
b00001000 3
b00001000 6
b00001001 7
b00001010 8
b00001011 9
b00001100 <
b00001101 =
b00001110 >
b00001111 ?
b00000001 F
b00000010 G
b00000011 H
b00000101 J
b00000110 K
b00000111 L
b00001000 M
b00001000 O
b00001001 P
b00001010 Q
b00001011 R
b00001100 T
b00001101 U
b00001110 V
b00001111 W
1[
#20
0[
0]
#21
b00000011 #
b00001000 $
b00000000 *
b00000001 +
b00000010 ,
b00000011 -
b00000000 0
b00000101 1
b00000110 2
b00000111 3
b00001000 4
b00000000 6
b00001000 7
b00001001 8
b00001010 9
b00001011 :
b00000000 <
b00001100 =
b00001101 >
b00001110 ?
b00001111 @
b00000000 F
b00000001 G
b00000010 H
b00000000 J
b00000101 K
b00000110 L
b00000111 M
b00000000 O
b00001000 P
b00001001 Q
b00001010 R
b00001011 S
b00000000 T
b00001100 U
b00001101 V
b00001110 W
b00001111 X
1[
#22
0[
#23
b00000010 #
b00000111 $
b00001011 %
b00000000 +
b00000001 ,
b00000010 -
b00000000 1
b00000101 2
b00000110 3
b00000111 4
b00000000 7
b00001000 8
b00001001 9
b00001010 :
b00001011 ;
b00000000 =
b00001100 >
b00001101 ?
b00001110 @
b00001111 A
b00000000 G
b00000001 H
b00000000 K
b00000101 L
b00000110 M
b00000000 P
b00001000 Q
b00001001 R
b00001010 S
b00000000 U
b00001100 V
b00001101 W
b00001110 X
b00001111 Y
1[
#24
0[
#25
b00000001 #
b00000110 $
b00001010 %
b00001111 &
b00000000 ,
b00000001 -
b00000000 2
b00000101 3
b00000110 4
b00000000 8
b00001000 9
b00001001 :
b00001010 ;
b00000000 >
b00001100 ?
b00001101 @
b00001110 A
b00001111 B
b00000000 H
b00000000 L
b00000101 M
b00000000 Q
b00001000 R
b00001001 S
b00000000 V
b00001100 W
b00001101 X
b00001110 Y
1[
#26
0[
#27
b00000000 #
b00000101 $
b00001001 %
b00001110 &
b00000000 -
b00000000 3
b00000101 4
b00000000 9
b00001000 :
b00001001 ;
b00000000 ?
b00001100 @
b00001101 A
b00001110 B
b00000000 M
b00000000 R
b00001000 S
b00000000 W
b00001100 X
b00001101 Y
1[
#28
0[
#29
b00000000 $
b00001000 %
b00001101 &
b00000000 4
b00000000 :
b00001000 ;
b00000000 @
b00001100 A
b00001101 B
b00000000 S
b00000000 X
b00001100 Y
1[
#30
0[
#31
b00000000 %
b00001100 &
b00000000 ;
b00000000 A
b00001100 B
b00000000 Y
1[
#32
0[
#33
b00000000 &
b00000000 B
1[
#34
0[
#35
1[
#36
0[
#37
1[
#38
0[
#39
1[
#40
0[
#41
1[
#42
0[
#43
1[
#44
0[
#45
1[
#46
0[
#47
1[
#48
0[
#49
1[
